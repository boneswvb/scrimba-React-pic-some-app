{"version":3,"sources":["Context.js","components/Header.js","components/CartItem.js","pages/Cart.js","components/Image.js","utils/index.js","pages/Photos.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","Header","cartClassName","useContext","cartItems","length","to","className","CartItem","item","useState","hovered","setHovered","removeFromCart","iconClassName","onClick","id","onMouseEnter","onMouseLeave","alt","src","url","width","Cart","buttonText","setButtonText","emptyCart","totalCostDisplay","toLocaleString","style","currency","cartItemElements","map","key","setTimeout","console","log","Image","img","toggleFavorite","addToCart","isFavorite","some","getClass","i","Photos","imageElements","allPhotos","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","children","setAllPhotos","setCartItems","useEffect","fetch","then","res","json","data","Provider","value","updatedArr","photo","newItem","prevItems","filter","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0b95e31e.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\"\r\n\r\nconst Context = React.createContext()\r\n\r\nconst ContextProvider = ({children}) => {\r\n  const [allPhotos, setAllPhotos] = useState([])\r\n  const [cartItems, setCartItems] = useState([])\r\n  \r\n  const url = \"https://raw.githubusercontent.com/bobziroll/scrimba-react-bootcamp-images/master/images.json\"\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(data => setAllPhotos(data))\r\n  }, [])\r\n  \r\n  const toggleFavorite = (id) => {\r\n    const updatedArr = allPhotos.map(photo => {\r\n      if(photo.id === id) {\r\n          return {...photo, isFavorite: !photo.isFavorite}\r\n      }\r\n      return photo\r\n    })\r\n      setAllPhotos(updatedArr)\r\n  }\r\n  \r\n  const addToCart = (newItem) => {\r\n    setCartItems(prevItems => [...prevItems, newItem])\r\n  }\r\n  \r\n  const removeFromCart = (id) => {\r\n    setCartItems(prevItems => prevItems.filter(item => item.id !== id))\r\n  }\r\n  \r\n  const emptyCart = () => {\r\n    setCartItems([])\r\n  }\r\n  \r\n  return (\r\n    <Context.Provider value={{\r\n      allPhotos, \r\n      toggleFavorite, \r\n      cartItems, \r\n      addToCart, \r\n      removeFromCart, \r\n      emptyCart\r\n    }}>\r\n      {children}\r\n    </Context.Provider>\r\n  )\r\n}\r\n\r\nexport {ContextProvider, Context}","import React, {useContext} from \"react\"\r\nimport {Link} from \"react-router-dom\"\r\n\r\nimport {Context} from \"../Context\"\r\n\r\nconst Header = () => {\r\n    const {cartItems} = useContext(Context)\r\n    const cartClassName = cartItems.length > 0 ? \"ri-shopping-cart-fill\" : \"ri-shopping-cart-line\"\r\n    return (\r\n        <header>\r\n            <Link to=\"/\"><h2>Pic Some</h2></Link>\r\n            <Link to=\"/cart\">\r\n                <i className={`${cartClassName} ri-fw ri-2x`}></i>\r\n            </Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, {useState, useContext} from \"react\"\r\nimport {Context} from \"../Context\"\r\n\r\nconst CartItem = ({item}) => {\r\n    const [hovered, setHovered] = useState(false)\r\n    const {removeFromCart} = useContext(Context)\r\n    \r\n    const iconClassName = hovered ? \"ri-delete-bin-fill\" : \"ri-delete-bin-line\"\r\n    \r\n    return (\r\n        <div className=\"cart-item\">\r\n            <i \r\n                className={iconClassName} \r\n                onClick={() => removeFromCart(item.id)}\r\n                onMouseEnter={() => setHovered(true)}\r\n                onMouseLeave={() => setHovered(false)}\r\n            >\r\n            </i>\r\n            \r\n            <img className=\"img\" alt={\"\"} src={item.url} width=\"130px\" />\r\n            <p>$5.99</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CartItem","import React, {useState, useContext} from \"react\"\r\nimport {Context} from \"../Context\"\r\nimport CartItem from \"../components/CartItem\"\r\n\r\nconst Cart = () => {\r\n  const [buttonText, setButtonText] = useState(\"Place Order\")\r\n  const {cartItems, emptyCart} = useContext(Context)\r\n  const totalCost = 5.99 * cartItems.length\r\n  const totalCostDisplay = totalCost.toLocaleString(\"en-US\", {style: \"currency\", currency: \"USD\"})\r\n  \r\n  const cartItemElements = cartItems.map(item => (\r\n    <CartItem key={item.id} item={item} />\r\n  ))\r\n  \r\n  const placeOrder = () => {\r\n    setButtonText(\"Ordering...\")\r\n    setTimeout(() => {\r\n      console.log(\"Order placed!\")\r\n      setButtonText(\"Place Order\")\r\n      emptyCart()\r\n    }, 3000)\r\n  }\r\n  \r\n  return (\r\n    <main className=\"cart-page\">\r\n      <h1>Check out</h1>\r\n      {cartItemElements}\r\n      <p className=\"total-cost\">Total: {totalCostDisplay}</p>\r\n      {\r\n        cartItems.length > 0 ?\r\n        <div className=\"order-button\">\r\n          <button onClick={placeOrder}>{buttonText}</button>\r\n        </div> :\r\n        <p>You have no items in your cart.</p>\r\n      }\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Cart","import React, {useState, useContext} from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nimport {Context} from \"../Context\"\r\n\r\nconst Image = ({className, img}) => {\r\n    const [hovered, setHovered] = useState(false)\r\n    const {toggleFavorite, addToCart, cartItems, removeFromCart} = useContext(Context)\r\n    \r\n    const heartIcon = () => {\r\n        if(img.isFavorite) {\r\n            return <i className=\"ri-heart-fill favorite\" onClick={() => toggleFavorite(img.id)}></i>\r\n        } else if(hovered) {\r\n            return <i className=\"ri-heart-line favorite\" onClick={() => toggleFavorite(img.id)}></i>\r\n        }\r\n    }\r\n    \r\n    const cartIcon = () => {\r\n        const alreadyInCart = cartItems.some(item => item.id === img.id)\r\n        if(alreadyInCart) {\r\n            return <i className=\"ri-shopping-cart-fill cart\" onClick={() => removeFromCart(img.id)}></i>\r\n        } else if(hovered) {\r\n            return <i className=\"ri-add-circle-line cart\" onClick={() => addToCart(img)}></i>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className={`${className} image-container`}\r\n            onMouseEnter={() => setHovered(true)}\r\n            onMouseLeave={() => setHovered(false)}\r\n        >\r\n            <img alt={\"\"} src={img.url} className=\"image-grid\"/>\r\n            {heartIcon()}\r\n            {cartIcon()}\r\n        </div>\r\n    )\r\n}\r\n\r\nImage.propTypes = {\r\n    className: PropTypes.string,\r\n    img: PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        url: PropTypes.string.isRequired,\r\n        isFavorite: PropTypes.bool\r\n    })\r\n}\r\n\r\nexport default Image\r\n","export const getClass = (i) => {\r\n  if (i % 5 === 0) {\r\n    return 'big';\r\n  }\r\n  else if (i % 6 === 0) {\r\n    return 'wide'\r\n  }\r\n}","import React, {useContext} from \"react\"\r\n\r\nimport Image from \"../components/Image\"\r\nimport {Context} from \"../Context\"\r\nimport {getClass} from \"../utils\"\r\n\r\nconst Photos = () => {\r\n  const {allPhotos} = useContext(Context)\r\n    \r\n  const imageElements = allPhotos.map((img, i) => (\r\n    <Image key={img.id} img={img} className={getClass(i)} />\r\n  ))\r\n    \r\n  return (\r\n    <main className=\"photos\">\r\n      {imageElements}\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Photos","import React from \"react\"\r\nimport {Switch, Route} from \"react-router-dom\"\r\nimport './App.css'\r\n\r\nimport Header from \"./components/Header\"\r\nimport Cart from \"./pages/Cart\"\r\nimport Photos from \"./pages/Photos\"\r\n\r\nconst App = () => {    \r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n            <Photos />\r\n          </Route>          \r\n          <Route path=\"/cart\">\r\n            <Cart />\r\n          </Route>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport {BrowserRouter as Router} from 'react-router-dom'\r\nimport {ContextProvider} from './Context'\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n\t<ContextProvider>\r\n\t\t<Router>\r\n\t\t\t<App />\r\n\t\t</Router> \t\r\n\t</ContextProvider>\r\n\t,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}